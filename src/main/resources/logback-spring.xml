<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	日志级别：TRACE < DEBUG < INFO < WARN < ERROR < FATAL 。
	根节点：configuration
	属性1：scan：当配置文件被修改时，将会被重新加载 默认为'true'
	属性2：scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效，默认的时间间隔为1分钟。 
	属性3：debug：当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态，默认值为 false 。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
	<!-- 
		子节点1：contextName：设置上下文名称。每个logger都关联到logger上下文，默认上下文名称为“default”。
		但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过 %contextName 来打印日志上下文名称，一般来说我们不用这个属性，可有可无。
	 -->
	<contextName>demo</contextName>
	
	<!-- 
		子节点2：property：用来定义变量的标签，定义变量后，可以使“${}”来使用变量。
		属性1：name：变量的名称。
		属性2：value：变量定义的值，通过定义的值会被插入到logger上下文中。
	 -->
	 <property name="log.dir" value="logs"/>
	 <property name="log.appname" value="eran"/>
	 
	 <!-- 
	 	子节点3：appender：appender用来格式化日志输出节点。
	 	属性1：name：定义名字。
	 	属性2：class：指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
	 		class="ch.qos.logback.core.ConsoleAppender":控制台策略
	 		class="ch.qos.logback.core.rolling.RollingFileAppender":文件输出策略
	  -->
	  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
	  	<!-- 
	  		encoder:表示对日志进行编码
	  	-->
	  	<encoder>
	  		<!-- 
	  			[Eran]：项目名
	  			%date：时间
	  			%thread：输出日志的进程名字，这在Web应用以及异步任务处理中很有用
	  			%line：行数
	  			%level：日志级别
	  			%logger{10}：日志输出文件的名字
	  			%msg：日志内容
	  			%n：换行
	  		 -->
	  		<pattern>[Eran]%date [%thread %line] %level >> %msg >> %logger{10}%n</pattern>
	  	</encoder>
	  </appender>
	  
	  <!-- 输出到文件 -->
	  <appender name="file-log" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
	 	<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
	  	<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	  		<!-- 日志文件路径以及名称定义，定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
	  		<fileNamePattern>${log.dir}/${log.appname}.%d{yyyy-MM-dd}.log</fileNamePattern>
	  		<!-- 只保留近七天的日志 -->
	  		<maxHistory>7</maxHistory>
	  		<!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
	  		<totalSizeCap>1GB</totalSizeCap>
	  	</rollingPolicy> 
	  	
	  	<encoder>
			<charset>UTF-8</charset>
			<pattern>[Eran]%date [%thread %line] %level >> %msg >> %logger{10}%n</pattern>
		</encoder>
		<!-- 级别过滤只输出info以上的级别 -->
		 <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		 </filter>
	  </appender>
	  
	  <!-- 
	  	    子节点4：loger：用来设置某一个包或者具体的某一个类的日志打印级别、以及指定 <appender> 。
	  	   属性1：name：用来指定受此loger约束的某一个包或者具体的某一个类，必选。
	  	   属性2：level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，
	  	   	代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
	  	   属性3：addtivity：是否向上级loger传递打印信息，默认是true。
	   -->
	   <logger name="com.web.eran" level="info"/>
	   <logger name="org.springframework" level="INFO"></logger>
       <logger name="org.mybatis" level="INFO"></logger>
	<!-- 
		子节点5：root：必选节点，用来指定最基础的日志输出级别。
		属性1：level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL,默认是DEBUG。
	 -->
	<root level="info">
		<!-- 输出到控制台 -->
		<appender-ref ref="console"/>
		<!-- 输出到文件 -->
		<!-- <appender-ref ref="file-log"/>  -->
	</root>
</configuration>